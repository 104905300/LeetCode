// average speed and not the most space efficient, but it worked though :)



class Solution {
    public int leastInterval(char[] tasks, int n) {
        if (tasks.length == 1) {
            return 1;
        } 
        
        if (n == 0) {
            return tasks.length;    
        }        
        List<Integer> charOccurrence = new ArrayList<Integer>();
        int count = 1;
        Arrays.sort(tasks);
        for (int i = 0; i < tasks.length; i++) {
            if (i+1 == tasks.length) {
                charOccurrence.add(count);
            } else if (tasks[i+1] == tasks[i]) {
                count++;
            } else {
                charOccurrence.add(count);
                count = 1;
            }
        }
        
        int finishedTask = 0;
        count = n + 1; //+1 bc first task has no cooldown
        int result = 0;
        
        while(charOccurrence.size() != finishedTask) {
            Collections.sort(charOccurrence);
            Collections.reverse(charOccurrence);
            for (int i = 0; i < charOccurrence.size(); i++) {
                if (charOccurrence.get(i) == 0) {
                    continue;
                }
                charOccurrence.set(i, charOccurrence.get(i) - 1); //do the task with the most occurrence to least occurrence until cooldown reset
                result++;
                count--;
                if (charOccurrence.get(i) == 0) {
                    finishedTask++;
                }
                if (count == 0) { // if cooldown resets, sort the list again and do the tasks with the most occurence
                    break;
                }
            }
            if (charOccurrence.size() != finishedTask) {
                result = result + count; // after traversing all tasks, the counts left are idles that will be added to the result
                count = n + 1;  
            }
        }
        return result;
    }
}