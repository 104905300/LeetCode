// question link: https://leetcode.com/problems/search-in-rotated-sorted-array/

class Solution {
    public int search(int[] nums, int target) {        
        // division by int alwayas rounds down
        int mid = nums.length / 2;
        int low = 0;
        int high = nums.length - 1;
        
        while (high >= low) {
            mid = (low + high)/2;
            if (nums[mid] == target){
                return mid;
            }
            
            //if nums[low] <= nums[mid], left side is sorted, right side contain rotation
            if (nums[low] <= nums[mid]) { 
                if (nums[low] <= target && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else { // nums[low] > nums[mid], right side is sorted, left side contain rotation
                if (nums[mid] < target && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
}