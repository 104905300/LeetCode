// view with notepad++ for better clarity

    int[] dp = new int[10001];
    public int racecar(int t) {
        if (dp[t] > 0) return dp[t];
        int n = (int)(Math.log(t) / Math.log(2)) + 1;
        if (1 << n == t + 1) {
            dp[t] = n;
        } else {
			// This is for going over the target 
			// 1<<n will be the upperbound(power of 2) of target. (1 << n) - 1 - t is the remainder after going over
			//n + 1 is acclerate n times then do one reverse
            dp[t] = racecar((1 << n) - 1 - t) + n + 1;
            for (int m = 0; m < n - 1; ++m) {
				// This is for the lowerbound of the target, (go as far as possible without going over target)
				// m is how many time to acclerate in reverse direction before going forward again, we check 
				// this for all m, note m < n
				// t - (1 << (n - 1)) is the remainder for lowerbound, (1 << m) is the extra distance for reversing
				// total instrustions for going to lowerbound and adding reverse distance is n-1+2+m where n - 1 is 
				// instrustions for lowerbound, + 2 is for reversing twice, (we gatta go forward again after reversing to fill the remaining remainder)
				// and n-1+2+m = n + m + 1
                dp[t] = Math.min(dp[t], racecar(t - (1 << (n - 1)) + (1 << m)) + n + m + 1);
            }
        }
        return dp[t];
    }